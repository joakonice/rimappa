// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  ORGANIZER
  COMPETITOR
}

enum CompetitionStatus {
  OPEN
  CLOSED
  CANCELLED
  FINISHED
}

enum CompetitionModality {
  ONE_VS_ONE
  TWO_VS_TWO
  THREE_VS_THREE
  FOUR_VS_FOUR
  MULTIVERSE
  SURVIVAL
  CUSTOM
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  organizedCompetitions Competition[]   @relation("OrganizedCompetitions")
  participations        Participation[]
  reviews               Review[]
  activities            Activity[]
  accounts              Account[]
  sessions              Session[]
}

model Competition {
  id                  String            @id @default(cuid())
  title               String
  description         String
  date                DateTime
  location            String
  maxParticipants     Int
  currentParticipants Int               @default(0)
  status              CompetitionStatus @default(OPEN)
  image               String?
  rating              Float?            @default(4.5)
  price               String?
  prize               String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relationships
  organizerId  String
  organizer    User            @relation("OrganizedCompetitions", fields: [organizerId], references: [id])
  participants Participation[]
  reviews      Review[]
  activities   Activity[]

  @@index([organizerId])
}

model Participation {
  id            String   @id @default(cuid())
  userId        String
  competitionId String
  status        String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user        User        @relation(fields: [userId], references: [id])
  competition Competition @relation(fields: [competitionId], references: [id])

  @@unique([userId, competitionId])
  @@index([userId])
  @@index([competitionId])
}

model Review {
  id            String   @id @default(cuid())
  rating        Float
  comment       String?
  userId        String
  competitionId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  user        User        @relation(fields: [userId], references: [id])
  competition Competition @relation(fields: [competitionId], references: [id])

  @@index([userId])
  @@index([competitionId])
}

model Activity {
  id            String   @id @default(cuid())
  type          String // COMPETITION_CREATED, COMPETITION_UPDATED, etc.
  description   String
  userId        String
  competitionId String?
  createdAt     DateTime @default(now())

  // Relationships
  user        User         @relation(fields: [userId], references: [id])
  competition Competition? @relation(fields: [competitionId], references: [id])

  @@index([userId])
  @@index([competitionId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
