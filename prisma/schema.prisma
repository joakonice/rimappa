// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  role          UserRole  @default(COMPETITOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth
  accounts      Account[]
  sessions      Session[]

  // Relationships
  organizedCompetitions Competition[] @relation("OrganizedCompetitions")
  participations        Participation[]
  reviewsGiven         Review[]       @relation("ReviewAuthor")
  reviewsReceived      Review[]       @relation("ReviewTarget")
  activities           Activity[]
}

model Competition {
  id                  String   @id @default(cuid())
  title              String
  description        String
  date               DateTime
  location           String
  maxParticipants    Int
  currentParticipants Int      @default(0)
  status             String    @default("OPEN")
  image              String?
  rating             Float?    @default(4.5)
  price              String?
  prize              String?
  judges             String[]  @default([])
  hosts              String[]  @default([])
  filmmaker          String?
  music              String?
  photography        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  // Relationships
  organizerId        String
  organizer          User      @relation("OrganizedCompetitions", fields: [organizerId], references: [id])
  participants       Participation[]
  reviews           Review[]
  activities        Activity[]

  @@index([organizerId])
}

model Participation {
  id            String    @id @default(cuid())
  status        ParticipationStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id])

  @@unique([userId, competitionId])
  @@index([userId])
  @@index([competitionId])
}

model Review {
  id            String   @id @default(cuid())
  rating        Int
  comment       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  authorId      String
  author        User      @relation("ReviewAuthor", fields: [authorId], references: [id])
  targetId      String
  target        User      @relation("ReviewTarget", fields: [targetId], references: [id])
  competitionId String
  competition   Competition @relation(fields: [competitionId], references: [id])

  @@index([authorId])
  @@index([targetId])
  @@index([competitionId])
}

model Activity {
  id            String    @id @default(cuid())
  type          ActivityType
  title         String
  description   String
  createdAt     DateTime  @default(now())

  // Relationships
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  competitionId String?
  competition   Competition? @relation(fields: [competitionId], references: [id])

  @@index([userId])
  @@index([competitionId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  ORGANIZER
  COMPETITOR
}

enum CompetitionStatus {
  OPEN
  IN_PROGRESS
  FINISHED
  CANCELLED
}

enum ParticipationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WAITLIST
}

enum ActivityType {
  COMPETITION_CREATED
  PARTICIPATION_REQUESTED
  PARTICIPATION_UPDATED
}

enum Role {
  ADMIN
  ORGANIZER
  COMPETITOR
} 